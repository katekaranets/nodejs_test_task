const express = require('express');
const bodyParser = require('body-parser');
const ContactModel = require('./model/contact.model');
const CallHistoryModel = require('./model/call-history.model');
const Promise = require('bluebird');

const app = express();
app.use(bodyParser.json());


//endpoint to get list of contacts. It shows 5 contacts per page by default
app.get('/api/contact', function (req, res) {
    let pageNumber = +req.query.page || 1;
    let pageSize = +req.query.pageSize || 5;
    let skip = (pageNumber - 1) * pageSize;
    Promise.props({
        count: ContactModel.count({}).exec(),
        contacts: ContactModel.find({}, {}, {skip , limit: pageSize }).exec()
    })
        .then(data => {
            res.send({
                contacts: data.contacts,
                page: pageNumber,
                pageSize,
                totalPages: Math.ceil(data.count/pageSize)
            })
        })
        .catch(handleError(req, res))
});

//endpoint to create new contact
app.post('/api/contact', (req, res) => {
    ContactModel.create({
        firstName: req.body.firstName,
        lastName: req.body.lastName,
        contactNumber: req.body.contactNumber
    })
        .then(contact => generateCallHistory(contact))
        .then(contact => {
            res.send({contact})
        })
        .catch(handleError(req, res))
});

//endpoint to get particular contact
app.get('/api/contact/:id', (req, res) => {
    ContactModel.findById(req.params.id).exec()
        .then(contact => {
            res.send({contact})
        })
        .catch(handleError(req, res))
});

//endpoint to show call history for particular contact (call history is generated by random)
app.get('/api/contact/:id/history', (req, res) => {
    CallHistoryModel.find({
        $or: [
            {out: req.params.id},
            {in: req.params.id}
        ]
    }).exec()
        .then(callHistory => {
            res.send({callHistory})
        })
        .catch(handleError(req, res))
});

//endpoint to update contact
app.put('/api/contact/:id', (req, res) => {
    let updatedContact = {};
    if(req.body.contactNumber !== undefined){
        updatedContact.contactNumber = req.body.contactNumber
    }
    if(req.body.firstName !== undefined){
        updatedContact.firstName = req.body.firstName
    }
    if(req.body.lastName !== undefined){
        updatedContact.lastName = req.body.lastName
    }
    ContactModel.update({_id: req.params.id}, updatedContact)
        .then(data => {
            if(data.ok == 1 && data.nModified == 1){
                return ContactModel.findById(req.params.id).exec()
            } else if(data.ok == 1 && data.n == 1){
                res.status(400).send({error: 'no fields updated',})
            } else if(data.ok == 1){
                res.status(404).send({error: 'can not find'})
            } else {
                res.status(500).send({error: 'error'})
            }
        })
        .then(contact => {
            if(!contact){
                return;
            }
            res.send({contact})
        })
        .catch(handleError(req, res))
});

//endpoint to delete contact from DB
app.delete('/api/contact/:id', (req, res) => {
    ContactModel.remove({_id: req.params.id})
        .then((data) => {
            if(data.result.ok == 1 && data.result.n == 1){
                res.send({result: 'deleted'})
            } else if(data.result.ok == 1){
                res.status(404).send({error: 'contact not found'})
            } else {
                res.status(500).send({error: 'error'})
            }
        })
        .catch(handleError(req, res))
});

function handleError(req, res) {
    return function (err) {
        console.error(err);
        res.status(500).send({
            status: 'error',
            error: 'cannot execute request'
        })
    }
}

function getRandom(min, max) {
    return Math.floor(Math.random() * (max - min) + min);
}

//generation of call history. It makes connection between current contact and every others
function generateCallHistory(contact){
    return ContactModel.find({ _id: { $ne: contact._id }})
        .then(contacts => {
            return Promise.all(contacts.map(c => CallHistoryModel.create({
                out: contact,
                in: c,
                duration: getRandom(1000, 10000),
                createdAt: new Date()
            })))
        })
        .then(history => contact);
}

module.exports = app;